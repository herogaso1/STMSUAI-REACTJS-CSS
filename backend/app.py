from flask import Flask, request, jsonify
from flask_cors import CORS
import os
from dotenv import load_dotenv
import requests
from DB.database import get_db, engine
from DB.models import User, Task, Workspace, Tag, Note, Notification
from sqlalchemy import text
from werkzeug.security import generate_password_hash, check_password_hash

# --- 1. TH√äM IMPORT CHO CLOUDINARY ---
import cloudinary
import cloudinary.uploader

app = Flask(__name__)
CORS(app)

# üîπ T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# --- 2. C·∫§U H√åNH CLOUDINARY T·ª™ FILE .ENV ---
cloudinary.config(cloudinary_url=os.getenv("CLOUDINARY_URL"), secure=True)

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MODEL_NAME = "gemini-2.5-flash"  # ‚úÖ ƒê·∫∑t ƒë√∫ng t√™n bi·∫øn

# --- 3. (ƒê√É KH√îI PH·ª§C) D·ªÆ LI·ªÜU HU·∫§N LUY·ªÜN AI ---
AI_KNOWLEDGE = """
B·∫°n l√† m·ªôt AI chatbot t√™n MiMi ChatBot, tr·ª£ l√Ω c·ªßa h·ªá th·ªëng STMSUAI. 
T√≠nh c√°ch: d·ªÖ th∆∞∆°ng, th√¢n thi·ªán, nh√≠ nh·∫£nh, x∆∞ng "t·ªõ" v·ªõi ng∆∞·ªùi d√πng . 

Quy t·∫Øc ph·∫£n h·ªìi:

1. Khi b·∫Øt ƒë·∫ßu tr·∫£ l·ªùi, lu√¥n n√≥i: "MIMI ChatBot xin tr·∫£ l·ªùi üíñ"
2. H·ªó tr·ª£ ng∆∞·ªùi d√πng qu·∫£n l√Ω c√¥ng vi·ªác, ƒëi·ªÉm danh, l·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p.
3. Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ "ƒëi·ªÉm danh", tr·∫£ l·ªùi r·∫±ng: "D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u trong h·ªá th·ªëng STMSUAI nha üíå"
4. Khi ng∆∞·ªùi d√πng ch√†o h·ªèi, tr·∫£ l·ªùi th√¢n thi·ªán v√† l·ªãch s·ª±, k√®m bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c d·ªÖ th∆∞∆°ng.
5. Khi kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ th√¥ng tin, tr·∫£ l·ªùi: "M√¨nh ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ tr·∫£ l·ªùi, c·∫≠u c√≥ th·ªÉ cung c·∫•p th√™m th√¥ng tin kh√¥ng? ü•∫"
6. Lu√¥n gi·ªØ gi·ªçng ƒëi·ªáu ƒë√°ng y√™u, g·∫ßn g≈©i, c√≥ th·ªÉ ch√®n emoji khi ph√π h·ª£p.
"""

# ‚úÖ Route test backend
@app.route('/api/test', methods=['GET'])
def test():
    return jsonify({"message": "‚úÖ Backend STMSUAI ƒëang ho·∫°t ƒë·ªông!"})

# ‚úÖ Route test database connection
@app.route('/api/db-test', methods=['GET'])
def db_test():
    try:
        db = next(get_db())
        db.execute(text("SELECT 1"))
        users_count = db.query(User).count()
        tasks_count = db.query(Task).count()
        return jsonify({
            "message": "‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!",
            "database": "my_project_STMSUAI_db",
            "users_count": users_count,
            "tasks_count": tasks_count
        })
    except Exception as e:
        return jsonify({"error": f"‚ùå L·ªói database: {str(e)}"}), 500

# ‚úÖ Route l·∫•y danh s√°ch users
@app.route('/api/users', methods=['GET'])
def get_users():
    try:
        db = next(get_db())
        users = db.query(User).limit(10).all()
        users_list = [{
            "user_id": user.user_id,
            "username": user.username,
            "email": user.email,
            "full_name": user.full_name,
            "role": user.role,
            "created_at": user.created_at.isoformat() if user.created_at else None
        } for user in users]
        return jsonify({"users": users_list, "count": len(users_list)})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ‚úÖ Route ƒëƒÉng k√Ω t√†i kho·∫£n
@app.route('/api/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get("username")
    email = data.get("email")
    password = data.get("password")

    if not all([username, email, password]):
        return jsonify({"message": "Thi·∫øu th√¥ng tin ƒëƒÉng k√Ω!"}), 400

    db = next(get_db())
    existing_user = db.query(User).filter_by(email=email).first()
    if existing_user:
        return jsonify({"message": "Email ƒë√£ t·ªìn t·∫°i!"}), 400

    hashed_pw = generate_password_hash(password)
    new_user = User(username=username, email=email, password_hash=hashed_pw)
    db.add(new_user)
    db.commit()

    return jsonify({"message": "ƒêƒÉng k√Ω th√†nh c√¥ng!"}), 201

# ‚úÖ Route ƒëƒÉng nh·∫≠p t√†i kho·∫£n
@app.route('/api/login', methods=['POST'])
def login():
    data = request.get_json()
    email = data.get("email")
    password = data.get("password")

    if not all([email, password]):
        return jsonify({"message": "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u!"}), 400

    db = next(get_db())
    user = db.query(User).filter_by(email=email).first()

    if not user or not check_password_hash(user.password_hash, password):
        return jsonify({"message": "Sai email ho·∫∑c m·∫≠t kh·∫©u!"}), 401

    return jsonify({
        "message": "C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!",
        "user": {
            "user_id": user.user_id,
            "username": user.username,
            "email": user.email,
            "avatar_url": user.avatar_url,
            "created_at": user.created_at.isoformat() if user.created_at else None # üëà TH√äM D√íNG N√ÄY
        }
    }), 200

# --- 4. (ƒê√É KH√îI PH·ª§C) ROUTE AI CHAT ---
@app.route('/api/ai-chat', methods=['POST'])
def ai_chat():
    data = request.get_json()
    user_message = data.get("message", "").strip()

    if not user_message:
        return jsonify({"reply": "‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p tin nh·∫Øn n√†o!"})

    if not GEMINI_API_KEY:
        return jsonify({"reply": "‚ö†Ô∏è Thi·∫øu GEMINI_API_KEY trong file .env"})

    try:
        url = f"https://generativelanguage.googleapis.com/v1beta/models/{MODEL_NAME}:generateContent?key={GEMINI_API_KEY}"
        payload = {
            "contents": [{
                "parts": [{
                    "text": f"{AI_KNOWLEDGE}\n\nNg∆∞·ªùi d√πng: {user_message}"
                }]
            }]
        }
        headers = {"Content-Type": "application/json"}
        res = requests.post(url, headers=headers, json=payload)
        res_data = res.json()

        ai_reply = None
        if "candidates" in res_data and len(res_data["candidates"]) > 0:
            parts = res_data["candidates"][0].get("content", {}).get("parts", [])
            if parts and "text" in parts[0]:
                ai_reply = parts[0]["text"]

        if not ai_reply:
            ai_reply = res_data.get("error", {}).get("message", "‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Gemini.")

        return jsonify({"reply": ai_reply})

    except Exception as e:
        print("‚ùå L·ªói AI:", e)
        return jsonify({"reply": f"L·ªói khi g·ªçi AI: {str(e)}"})

# ----------------------------------------------------
# ‚¨áÔ∏è (ƒê√É S·ª¨A) CODE C·∫¨P NH·∫¨T PROFILE ‚¨áÔ∏è
# ----------------------------------------------------
@app.route('/api/profile/update', methods=['POST'])
def update_profile():
    # D·ªÆ LI·ªÜU GI·ªú N·∫∞M TRONG `request.form` (v√¨ l√† FormData)
    user_id = request.form.get('user_id')
    new_username = request.form.get('username')
    new_email = request.form.get('email')
    
    # FILE N·∫∞M TRONG `request.files`
    avatar_file = request.files.get('avatar_file')

    if not all([user_id, new_username, new_email]):
        return jsonify({"message": "Thi·∫øu th√¥ng tin user_id, username ho·∫∑c email!"}), 400

    db = next(get_db())
    
    # 1. T√¨m user trong CSDL
    user = db.query(User).filter(User.user_id == user_id).first()
    if not user:
        return jsonify({"message": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!"}), 404

    # 2. Ki·ªÉm tra tr√πng l·∫∑p
    if new_username != user.username:
        existing_username = db.query(User).filter(User.username == new_username).first()
        if existing_username:
            return jsonify({"message": "Username n√†y ƒë√£ c√≥ ng∆∞·ªùi s·ª≠ d·ª•ng!"}), 400
    
    if new_email != user.email:
        existing_email = db.query(User).filter(User.email == new_email).first()
        if existing_email:
            return jsonify({"message": "Email n√†y ƒë√£ c√≥ ng∆∞·ªùi s·ª≠ d·ª•ng!"}), 400

    # 3. C·∫≠p nh·∫≠t th√¥ng tin text
    user.username = new_username
    user.email = new_email
    
    # 5. X·ª¨ L√ù T·∫¢I FILE AVATAR M·ªöI
    if avatar_file:
        try:
            # T·∫£i file l√™n Cloudinary
            upload_result = cloudinary.uploader.upload(
                avatar_file,
                # C·∫Øt ·∫£nh th√†nh 150x150 v√† bo tr√≤n
                crop="thumb", 
                gravity="face", 
                width=150, 
                height=150, 
                radius="max"
            )
            # L·∫•y URL an to√†n
            new_avatar_url = upload_result.get('secure_url')
            if new_avatar_url:
                user.avatar_url = new_avatar_url
        except Exception as e:
            print(f"L·ªói t·∫£i ·∫£nh l√™n Cloudinary: {e}")
            # Kh√¥ng l√†m s·∫≠p server, ch·ªâ b·ªè qua vi·ªác c·∫≠p nh·∫≠t avatar
            pass 

    db.commit() # L∆∞u thay ƒë·ªïi
    db.refresh(user) # L√†m m·ªõi d·ªØ li·ªáu t·ª´ CSDL

    # 4. Tr·∫£ v·ªÅ th√¥ng tin user ƒë√£ c·∫≠p nh·∫≠t
    return jsonify({
        "message": "C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!",
        "user": {
            "user_id": user.user_id,
            "username": user.username,
            "email": user.email,
            "avatar_url": user.avatar_url # Tr·∫£ v·ªÅ avatar_url m·ªõi
        }
    }), 200
# ----------------------------------------------------
# ----------------------------------------------------
# ----------------------------------------------------
# ----------------------------------------------------

from flask_mail import Mail, Message
from itsdangerous import URLSafeTimedSerializer, SignatureExpired, BadTimeSignature
import time # Import th√™m

# --- C·∫§U H√åNH FLASK-MAIL ---
app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER')
app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 587))
app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS') == 'True'
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_USERNAME')

mail = Mail(app)

# T·∫°o serializer ƒë·ªÉ t·∫°o token b·∫£o m·∫≠t
# 'SECRET_KEY' n√™n l√† m·ªôt chu·ªói b√≠ m·∫≠t ng·∫´u nhi√™n, b·∫°n c√≥ th·ªÉ th√™m v√†o .env
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'mot-chuoi-bi-mat-rat-kho-doan-abc123')
s = URLSafeTimedSerializer(app.config['SECRET_KEY'])


# ‚úÖ API 1: G·ª≠i link qu√™n m·∫≠t kh·∫©u
@app.route('/api/forgot-password', methods=['POST'])
def forgot_password():
    data = request.get_json()
    email = data.get('email')

    if not email:
        return jsonify({"message": "Vui l√≤ng nh·∫≠p email!"}), 400

    db = next(get_db())
    user = db.query(User).filter_by(email=email).first()

    if not user:
        # L·ªói b·∫£o m·∫≠t: Kh√¥ng n√™n n√≥i "Kh√¥ng t√¨m th·∫•y user"
        # Ch·ªâ c·∫ßn tr·∫£ v·ªÅ th√†nh c√¥ng gi·∫£ ƒë·ªÉ tr√°nh l·ªô th√¥ng tin
        print(f"Y√™u c·∫ßu reset m·∫≠t kh·∫©u cho email kh√¥ng t·ªìn t·∫°i: {email}")
        return jsonify({"message": "N·∫øu email t·ªìn t·∫°i, link reset s·∫Ω ƒë∆∞·ª£c g·ª≠i."}), 200

    # T·∫°o token h·∫øt h·∫°n sau 1 gi·ªù (3600 gi√¢y)
    token = s.dumps(email, salt='password-reset-salt')

    # Link n√†y tr·ªè v·ªÅ trang frontend ResetPassword.jsx c·ªßa b·∫°n
    # PORT 5173 l√† port m·∫∑c ƒë·ªãnh c·ªßa Vite (frontend)
    reset_link = f"http://localhost:5173/reset-password/{token}"

    # G·ª≠i email
    try:
        msg = Message(
            subject="[STMSUAI] Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
            sender=app.config['MAIL_DEFAULT_SENDER'],
            recipients=[email]
        )
        msg.html = f"""
        <p>Ch√†o b·∫°n {user.username},</p>
        <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
        <p>Vui l√≤ng nh·∫•p v√†o link d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Link n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù.</p>
        <a href="{reset_link}" 
           style="background-color: #007bff; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px; display: inline-block;">
           ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
        </a>
        <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, vui l√≤ng b·ªè qua email n√†y.</p>
        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© STMSUAI - Admin Minh</p>
        """
        mail.send(msg)
        return jsonify({"message": "ƒê√£ g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u qua email."}), 200
    except Exception as e:
        print(f"L·ªói g·ª≠i mail: {e}")
        return jsonify({"message": f"L·ªói m√°y ch·ªß khi g·ª≠i mail: {e}"}), 500


# ‚úÖ API 2: X·ª≠ l√Ω reset m·∫≠t kh·∫©u
@app.route('/api/reset-password', methods=['POST'])
def reset_password():
    data = request.get_json()
    token = data.get('token')
    new_password = data.get('password')

    if not token or not new_password:
        return jsonify({"message": "Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u m·ªõi!"}), 400

    try:
        # Gi·∫£i m√£ token, ƒë·∫∑t th·ªùi gian h·∫øt h·∫°n l√† 3600 gi√¢y (1 gi·ªù)
        email = s.loads(token, salt='password-reset-salt', max_age=3600)
    except SignatureExpired:
        return jsonify({"message": "Link ƒë√£ h·∫øt h·∫°n! Vui l√≤ng y√™u c·∫ßu l·∫°i."}), 400
    except BadTimeSignature:
        return jsonify({"message": "Link kh√¥ng h·ª£p l·ªá!"}), 400
    except Exception:
        return jsonify({"message": "Link kh√¥ng h·ª£p l·ªá!"}), 400

    db = next(get_db())
    user = db.query(User).filter_by(email=email).first()

    if not user:
        return jsonify({"message": "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!"}), 404

    # C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
    hashed_pw = generate_password_hash(new_password)
    user.password_hash = hashed_pw
    db.commit()

    return jsonify({"message": "ƒê√£ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng!"}), 200

# ----------------------------------------------------
# ----------------------------------------------------

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)